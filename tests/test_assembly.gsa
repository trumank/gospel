global test_global = 5;
extern global external_global;

constant assembly_version = 1;

hidden function __define_opaque_base_type base_layout: TypeLayout size_and_alignment: Integer -> TypeLayout {
    LoadSlot base_layout;
    LoadSlot size_and_alignment;
    TypeLayoutAlign;
    LoadSlot size_and_alignment;
    TypeLayoutPad;
    TypeLayoutFinalize;
    ReturnValue;
};

function usize -> TypeLayout {
    LoadSlot &function __define_opaque_base_type;
    TypeLayoutAllocate "usize";
    LoadSlot &platform AddressSize;
    Call 2;
    ReturnValue;
};

function u32 -> TypeLayout {
    LoadSlot &function __define_opaque_base_type;
    TypeLayoutAllocate "u32";
    IntConstant 0x4;
    Call 2;
    ReturnValue;
};

function u8 -> TypeLayout {
    LoadSlot &function __define_opaque_base_type;
    TypeLayoutAllocate "u8";
    IntConstant 0x1;
    Call 2;
    ReturnValue;
};

function BitfieldStructTest -> TypeLayout {
    TypeLayoutAllocate "BitfieldStruct";
    LoadSlot &function u8;
    Call 0;
    IntConstant 0x1;
    TypeLayoutDefineBitfieldMember "bitfield_size_1";
    LoadSlot &function u8;
    Call 0;
    IntConstant 0x4;
    TypeLayoutDefineBitfieldMember "bitfield_size_4";
    LoadSlot &function u8;
    Call 0;
    IntConstant 0x6;
    TypeLayoutDefineBitfieldMember "bitfield_size_6";
    LoadSlot &function usize;
    Call 0;
    TypeLayoutDefineMember "test_member_usize";
    LoadSlot &function u8;
    Call 0;
    IntConstant 0x1;
    TypeLayoutDefineBitfieldMember "bitfield_size_1_2";
    TypeLayoutFinalize;
    ReturnValue;
};

constant uint32_t = lazy u32 -> TypeLayout;
constant lazy_global = global test_global;

function ForwarderType forward: TypeLayout -> TypeLayout {
    LoadSlot forward;
    ReturnValue;
};

function SimpleStruct -> TypeLayout {
    TypeLayoutAllocate "SimpleStruct";
    LoadSlot &function u32;
    Call 0;
    TypeLayoutDefineMember "test_member_u32";
    LoadSlot &function usize;
    Call 0;
    TypeLayoutDefineMember "test_member_usize";
    TypeLayoutFinalize;
    ReturnValue;
};

function ChildStruct -> TypeLayout {
    TypeLayoutAllocate "ChildStruct";
    LoadSlot &function SimpleStruct;
    Call 0;
    TypeLayoutDefineBaseClass;
    LoadSlot &function u32;
    Call 0;
    TypeLayoutDefineMember "child_member";
    TypeLayoutFinalize;
    ReturnValue;
};

function InvokerType invoke: Closure -> TypeLayout {
    LoadSlot invoke;
    Call 0;
    ReturnValue;
};

function StaticArrayType array_size: Integer -> TypeLayout {
    TypeLayoutAllocate "StaticArrayType";
    LoadSlot &function u32;
    Call 0;
    LoadSlot array_size;
    TypeLayoutDefineArrayMember "data";
    TypeLayoutFinalize;
    ReturnValue;
};

function ClosureCallFunction first: Integer second: Integer -> Integer {
    LoadSlot first;
    LoadSlot second;
    Add;
    ReturnValue;
};

function ClosureTest -> Integer {
    LoadSlot &function ClosureCallFunction;
    IntConstant 5;
    BindClosure 1;
A:  Slot Closure;
    StoreSlot A;
    IntConstant 7;
    LoadSlot A;
    Call 1;
    ReturnValue;
};

function ArrayTest -> Array {
    ArrayAllocate;
    IntConstant 3;
    ArrayReserve;
    IntConstant 15;
    ArrayPushItem;
    IntConstant 0;
    IntConstant 10;
    ArrayInsertItem;
    Dup;
    Dup;
    ArrayGetLength;
    IntConstant 1;
    Sub;
    ArrayGetItem;
    IntConstant 1;
    Add;
    ArrayPushItem;
    ReturnValue;
};

function AbortTest -> Integer {
    Abort "abort test";
};

structure TestStruct {
    named_field: Integer;
    test_field: Integer;
    Integer;
};

hidden structure LocalStruct {
    Integer;
};

function StructTest -> Struct {
    StructAllocate TestStruct;
    IntConstant 15;
    StructSetLocalField TestStruct 0;
    IntConstant 10;
    StructSetNamedField TestStruct "test_field";
    Dup;
    Dup;
    StructGetLocalField TestStruct 1;
A:  Slot Integer;
    StoreSlot A;
    StructGetNamedField TestStruct "named_field";
    LoadSlot A;
    Mul;
    StructSetLocalField TestStruct 2;
    ReturnValue;
};

function LocalStructTest -> Struct {
    StructAllocate structure LocalStruct;
    IntConstant 20;
    StructSetLocalField structure LocalStruct 0;
    ReturnValue;
};

function SimpleStructWithMetadata -> TypeLayout {
    TypeLayoutAllocate "MetadataStruct";
    LoadSlot &function u32;
    Call 0;
    TypeLayoutDefineMember "test_member";
    LoadSlot &function StructTest;
    Call 0;
    TypeLayoutSetMetadata;
    TypeLayoutFinalize;
    ReturnValue;
};

function ReadTypeLayoutMetadata -> Struct {
    LoadSlot &function SimpleStructWithMetadata;
    Call 0;
    TypeLayoutGetMetadata;
    ReturnValue;
};
